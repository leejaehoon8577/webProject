<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
        
    <context:component-scan base-package="com.health.service" /> 
    <context:component-scan base-package="com.health.dao" /> 
    <!--  패키지안의 java파일에서 @Component 가 붙은 클래스를 뒤져봐서 객체화한다. IOC컨테이너에 저장해놓는다. context:annotation-config 기능이 들어있음 -->
	<!--  @Controller, @Service, @Repository는 @Component와 같은 역할을 하지만 의미를 명확하게 구분할 수 있어 대부분 전자처럼 사용한다. -->
    
	<bean id ="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521/mydb" />
		<property name="username" value="MYDB" />
		<property name="password" value="1234" />
	</bean>
	
<!-- 	<bean id="noticeService" class="com.health.service.jdbc.JDBCNoticeService"> -->
	<!-- <property name="dataSource" ref="dataSource"/> -->
<!-- 	</bean> -->
	
	<!-- sqlSession 생성을 담당 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		
		<!-- mybatis 설정파일이 있는 위치 -->
    	<property name="configLocation" value="classpath:/mybatis-config.xml" />
    	
    	<!-- sql파일의 위치 -->
		<property name="mapperLocations" value="classpath:/mappers/*.xml" />
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	<!-- constructor-arg : 생성자 메소드 -->
	<!-- public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory) -> name -->
	<!-- ref="sqlSessionFactory" -> bean id="sqlSessionFactory" -->
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>

<!--  	<typeAliases> -->
<!--  		<typeAliase type="com.health.vo.VO" alias="vo" /> -->
<!--  	</typeAliases> -->
</beans>